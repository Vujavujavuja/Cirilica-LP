
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODAPOSTROPHE ARRAY ASSIGN CHAR CHAR_WORD CLOSED_BRACKET CLOSED_CURLY_BRACKET CLOSE_SQUARE COMMA COMMAND_END DIV DOUBLE DOUBLE_WORD ELIF ELSE EQUALS FOR FUNCTION GREATER GREATER_OR_EQUAL IF INT INT_WORD LESS LESS_OR_EQUAL LOGAND LOGNOT LOGOR MAIN_BEGIN MAIN_END MINUS MOD NAME NOT_EQUAL OPEN_BRACKET OPEN_CURLY_BRACKET OPEN_SQUARE PLUS PRINT QUOTATION_MARK RETURN SCAN SCANDEST STRING STRING_WORD TIMES WHILEProgram : MAIN_BEGIN Block MAIN_END\n                | FunctionDeclaration ProgramBlock : OPEN_CURLY_BRACKET Statements CLOSED_CURLY_BRACKETStatements : Statement\n                  | Statement StatementsStatement : Declaration COMMAND_END\n                 | StringDeclaration COMMAND_END\n                 | Array COMMAND_END\n                 | Assignment COMMAND_END\n                 | PrintStatement COMMAND_END\n                 | IfStatement\n                 | FunctionDeclaration\n                 | FunctionCall COMMAND_END\n                 | ScanStatement COMMAND_END\n                 | ForStatement\n                 | WhileStatement\n                 | ReturnStatement COMMAND_ENDStringDeclaration : STRING QUOTATION_MARK STRING QUOTATION_MARK\n                            | STRING APOSTROPHE STRING APOSTROPHEDeclaration : Type Variable\n                   | Type Variable ASSIGN Expression\n                   | Type Variable COMMA VariableListType : INT\n            | DOUBLE\n            | STRING\n            | CHAR\n            | ARRAYVariable : NAMEVariableList : Variable\n                    | Variable COMMA VariableListAssignment : Variable ASSIGN ExpressionExpression : Term\n                  | Expression PLUS Term\n                  | Expression MINUS TermTerm : Factor\n            | Term TIMES Factor\n            | Term DIV Factor\n            | Term MOD FactorFactor : INT_WORD\n              | DOUBLE_WORD\n              | STRING_WORD\n              | CHAR_WORD\n              | NAME_WORD\n              | OPEN_BRACKET Expression CLOSED_BRACKETNAME_WORD : NAME\n                 | FunctionCallPrintStatement : PRINT ExpressionIfStatement : IF OPEN_BRACKET Expression CLOSED_BRACKET Block\n                   | IF OPEN_BRACKET Expression CLOSED_BRACKET Block ELSE Block\n                   | IF OPEN_BRACKET Expression CLOSED_BRACKET Block ElifStatements\n                   | IF OPEN_BRACKET Expression CLOSED_BRACKET Block ElifStatements ELSE BlockElifStatements : ElifStatement\n                      | ElifStatement ElifStatementsElifStatement : ELIF OPEN_BRACKET Expression CLOSED_BRACKET BlockFunctionDeclaration : FUNCTION FunctionName OPEN_BRACKET FunctionParameters CLOSED_BRACKET BlockFunctionName : NAMEFunctionParameters : FunctionParameter\n                          | FunctionParameter COMMA FunctionParametersFunctionParameter : Type VariableFunctionCall : FunctionName OPEN_BRACKET FunctionArguments CLOSED_BRACKETFunctionArguments : FunctionArgument\n                         | FunctionArgument COMMA FunctionArgumentsFunctionArgument : ExpressionReturnStatement : RETURN ExpressionWhileStatement : WHILE OPEN_BRACKET Expression CLOSED_BRACKET BlockForStatement : FOR OPEN_BRACKET Assignment COMMAND_END Expression COMMAND_END Assignment CLOSED_BRACKET BlockExpression : Expression LOGAND Expression\n                  | Expression LOGOR Expression\n                  | LOGNOT ExpressionExpression : Expression EQUALS Expression\n                  | Expression LESS_OR_EQUAL Expression\n                  | Expression GREATER_OR_EQUAL Expression\n                  | Expression LESS Expression\n                  | Expression GREATER Expression\n                  | Expression NOT_EQUAL ExpressionArray : ARRAY OPEN_SQUARE ArrayElements CLOSE_SQUAREArrayElements : ArrayElement\n                     | ArrayElement COMMA ArrayElementsArrayElement : ExpressionScanStatement : SCAN SCANDEST Variable'
    
_lr_action_items = {'MAIN_BEGIN':([0,3,41,139,],[2,2,-3,-55,]),'FUNCTION':([0,3,6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[4,4,4,4,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'$end':([1,7,10,],[0,-2,-1,]),'OPEN_CURLY_BRACKET':([2,110,134,138,148,154,160,161,],[6,6,6,6,6,6,6,6,]),'NAME':([4,6,12,18,19,22,23,25,27,28,29,35,36,37,38,41,43,44,45,46,47,48,49,50,53,56,59,66,69,70,71,72,73,77,78,79,80,81,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,139,141,143,146,149,150,152,153,155,156,158,162,163,],[9,39,39,-11,-12,-15,-16,52,-25,-27,67,67,-23,-24,-26,-3,-6,-7,-8,-9,-10,-13,-14,-17,67,67,67,67,67,67,52,52,67,52,-25,-27,67,52,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-55,52,-48,-65,-50,-52,52,-49,-53,67,-51,-66,-54,]),'MAIN_END':([5,41,],[10,-3,]),'STRING':([6,12,18,19,22,23,40,41,43,44,45,46,47,48,49,50,54,55,111,139,143,146,149,150,153,155,158,162,163,],[27,27,-11,-12,-15,-16,78,-3,-6,-7,-8,-9,-10,-13,-14,-17,83,84,78,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'ARRAY':([6,12,18,19,22,23,40,41,43,44,45,46,47,48,49,50,111,139,143,146,149,150,153,155,158,162,163,],[28,28,-11,-12,-15,-16,79,-3,-6,-7,-8,-9,-10,-13,-14,-17,79,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'PRINT':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[29,29,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'IF':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[30,30,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'SCAN':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[32,32,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'FOR':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[33,33,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'WHILE':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[34,34,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'RETURN':([6,12,18,19,22,23,41,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[35,35,-11,-12,-15,-16,-3,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'INT':([6,12,18,19,22,23,40,41,43,44,45,46,47,48,49,50,111,139,143,146,149,150,153,155,158,162,163,],[36,36,-11,-12,-15,-16,36,-3,-6,-7,-8,-9,-10,-13,-14,-17,36,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'DOUBLE':([6,12,18,19,22,23,40,41,43,44,45,46,47,48,49,50,111,139,143,146,149,150,153,155,158,162,163,],[37,37,-11,-12,-15,-16,37,-3,-6,-7,-8,-9,-10,-13,-14,-17,37,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'CHAR':([6,12,18,19,22,23,40,41,43,44,45,46,47,48,49,50,111,139,143,146,149,150,153,155,158,162,163,],[38,38,-11,-12,-15,-16,38,-3,-6,-7,-8,-9,-10,-13,-14,-17,38,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'OPEN_BRACKET':([8,9,29,30,31,33,34,35,39,53,56,59,66,67,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,151,156,],[40,-56,66,69,70,72,73,66,-56,66,66,66,66,-56,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,156,66,]),'CLOSED_CURLY_BRACKET':([11,12,18,19,22,23,41,42,43,44,45,46,47,48,49,50,139,143,146,149,150,153,155,158,162,163,],[41,-4,-11,-12,-15,-16,-3,-5,-6,-7,-8,-9,-10,-13,-14,-17,-55,-48,-65,-50,-52,-49,-53,-51,-66,-54,]),'COMMAND_END':([13,14,15,16,17,20,21,24,51,52,57,58,60,61,62,63,64,65,67,68,74,82,101,107,108,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,147,],[43,44,45,46,47,48,49,50,-20,-28,-47,-32,-35,-39,-40,-41,-42,-43,-45,-46,-64,-31,-69,-80,137,-21,-29,-22,-18,-19,-76,-33,-34,-67,-68,-70,-71,-72,-73,-74,-75,-36,-37,-38,-44,-60,152,-30,]),'ASSIGN':([26,39,51,52,],[53,-28,80,-28,]),'QUOTATION_MARK':([27,83,],[54,116,]),'APOSTROPHE':([27,84,],[55,117,]),'OPEN_SQUARE':([28,],[56,]),'LOGNOT':([29,35,53,56,59,66,69,70,73,80,90,91,92,93,94,95,96,97,119,136,137,156,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'INT_WORD':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'DOUBLE_WORD':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STRING_WORD':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'CHAR_WORD':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'SCANDEST':([32,],[71,]),'ELSE':([41,143,149,150,155,163,],[-3,148,154,-52,-53,-54,]),'ELIF':([41,143,150,163,],[-3,151,151,-54,]),'COMMA':([51,52,58,60,61,62,63,64,65,67,68,76,86,87,101,105,106,112,114,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,],[81,-28,-32,-35,-39,-40,-41,-42,-43,-45,-46,111,119,-79,-69,136,-63,-59,141,-33,-34,-67,-68,-70,-71,-72,-73,-74,-75,-36,-37,-38,-44,-60,]),'CLOSED_BRACKET':([52,58,60,61,62,63,64,65,67,68,75,76,82,101,102,103,104,105,106,109,112,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,140,144,157,159,],[-28,-32,-35,-39,-40,-41,-42,-43,-45,-46,110,-57,-31,-69,133,134,135,-61,-63,138,-59,-33,-34,-67,-68,-70,-71,-72,-73,-74,-75,-36,-37,-38,-44,-60,-58,-62,160,161,]),'PLUS':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[88,-32,-35,-39,-40,-41,-42,-43,-45,-46,88,88,88,88,88,88,88,88,88,-33,-34,88,88,88,88,88,88,88,88,-36,-37,-38,-44,-60,88,88,]),'MINUS':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[89,-32,-35,-39,-40,-41,-42,-43,-45,-46,89,89,89,89,89,89,89,89,89,-33,-34,89,89,89,89,89,89,89,89,-36,-37,-38,-44,-60,89,89,]),'LOGAND':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[90,-32,-35,-39,-40,-41,-42,-43,-45,-46,90,90,90,90,90,90,90,90,90,-33,-34,90,90,90,90,90,90,90,90,-36,-37,-38,-44,-60,90,90,]),'LOGOR':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[91,-32,-35,-39,-40,-41,-42,-43,-45,-46,91,91,91,91,91,91,91,91,91,-33,-34,91,91,91,91,91,91,91,91,-36,-37,-38,-44,-60,91,91,]),'EQUALS':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[92,-32,-35,-39,-40,-41,-42,-43,-45,-46,92,92,92,92,92,92,92,92,92,-33,-34,92,92,92,92,92,92,92,92,-36,-37,-38,-44,-60,92,92,]),'LESS_OR_EQUAL':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[93,-32,-35,-39,-40,-41,-42,-43,-45,-46,93,93,93,93,93,93,93,93,93,-33,-34,93,93,93,93,93,93,93,93,-36,-37,-38,-44,-60,93,93,]),'GREATER_OR_EQUAL':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[94,-32,-35,-39,-40,-41,-42,-43,-45,-46,94,94,94,94,94,94,94,94,94,-33,-34,94,94,94,94,94,94,94,94,-36,-37,-38,-44,-60,94,94,]),'LESS':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[95,-32,-35,-39,-40,-41,-42,-43,-45,-46,95,95,95,95,95,95,95,95,95,-33,-34,95,95,95,95,95,95,95,95,-36,-37,-38,-44,-60,95,95,]),'GREATER':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[96,-32,-35,-39,-40,-41,-42,-43,-45,-46,96,96,96,96,96,96,96,96,96,-33,-34,96,96,96,96,96,96,96,96,-36,-37,-38,-44,-60,96,96,]),'NOT_EQUAL':([57,58,60,61,62,63,64,65,67,68,74,82,87,101,102,103,106,109,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,145,159,],[97,-32,-35,-39,-40,-41,-42,-43,-45,-46,97,97,97,97,97,97,97,97,97,-33,-34,97,97,97,97,97,97,97,97,-36,-37,-38,-44,-60,97,97,]),'CLOSE_SQUARE':([58,60,61,62,63,64,65,67,68,85,86,87,101,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,142,],[-32,-35,-39,-40,-41,-42,-43,-45,-46,118,-77,-79,-69,-33,-34,-67,-68,-70,-71,-72,-73,-74,-75,-36,-37,-38,-44,-60,-78,]),'TIMES':([58,60,61,62,63,64,65,67,68,120,121,130,131,132,133,135,],[98,-35,-39,-40,-41,-42,-43,-45,-46,98,98,-36,-37,-38,-44,-60,]),'DIV':([58,60,61,62,63,64,65,67,68,120,121,130,131,132,133,135,],[99,-35,-39,-40,-41,-42,-43,-45,-46,99,99,-36,-37,-38,-44,-60,]),'MOD':([58,60,61,62,63,64,65,67,68,120,121,130,131,132,133,135,],[100,-35,-39,-40,-41,-42,-43,-45,-46,100,100,-36,-37,-38,-44,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,3,],[1,7,]),'FunctionDeclaration':([0,3,6,12,],[3,3,19,19,]),'Block':([2,110,134,138,148,154,160,161,],[5,139,143,146,153,158,162,163,]),'FunctionName':([4,6,12,29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[8,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'Statements':([6,12,],[11,42,]),'Statement':([6,12,],[12,12,]),'Declaration':([6,12,],[13,13,]),'StringDeclaration':([6,12,],[14,14,]),'Array':([6,12,],[15,15,]),'Assignment':([6,12,72,152,],[16,16,108,157,]),'PrintStatement':([6,12,],[17,17,]),'IfStatement':([6,12,],[18,18,]),'FunctionCall':([6,12,29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[20,20,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'ScanStatement':([6,12,],[21,21,]),'ForStatement':([6,12,],[22,22,]),'WhileStatement':([6,12,],[23,23,]),'ReturnStatement':([6,12,],[24,24,]),'Type':([6,12,40,111,],[25,25,77,77,]),'Variable':([6,12,25,71,72,77,81,141,152,],[26,26,51,107,26,112,114,114,26,]),'Expression':([29,35,53,56,59,66,69,70,73,80,90,91,92,93,94,95,96,97,119,136,137,156,],[57,74,82,87,101,102,103,106,109,113,122,123,124,125,126,127,128,129,87,106,145,159,]),'Term':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,119,136,137,156,],[58,58,58,58,58,58,58,58,58,58,120,121,58,58,58,58,58,58,58,58,58,58,58,58,]),'Factor':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,130,131,132,60,60,60,60,]),'NAME_WORD':([29,35,53,56,59,66,69,70,73,80,88,89,90,91,92,93,94,95,96,97,98,99,100,119,136,137,156,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FunctionParameters':([40,111,],[75,140,]),'FunctionParameter':([40,111,],[76,76,]),'ArrayElements':([56,119,],[85,142,]),'ArrayElement':([56,119,],[86,86,]),'FunctionArguments':([70,136,],[104,144,]),'FunctionArgument':([70,136,],[105,105,]),'VariableList':([81,141,],[115,147,]),'ElifStatements':([143,150,],[149,155,]),'ElifStatement':([143,150,],[150,150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> MAIN_BEGIN Block MAIN_END','Program',3,'p_program','parser.py',14),
  ('Program -> FunctionDeclaration Program','Program',2,'p_program','parser.py',15),
  ('Block -> OPEN_CURLY_BRACKET Statements CLOSED_CURLY_BRACKET','Block',3,'p_block','parser.py',21),
  ('Statements -> Statement','Statements',1,'p_statements','parser.py',27),
  ('Statements -> Statement Statements','Statements',2,'p_statements','parser.py',28),
  ('Statement -> Declaration COMMAND_END','Statement',2,'p_statement','parser.py',40),
  ('Statement -> StringDeclaration COMMAND_END','Statement',2,'p_statement','parser.py',41),
  ('Statement -> Array COMMAND_END','Statement',2,'p_statement','parser.py',42),
  ('Statement -> Assignment COMMAND_END','Statement',2,'p_statement','parser.py',43),
  ('Statement -> PrintStatement COMMAND_END','Statement',2,'p_statement','parser.py',44),
  ('Statement -> IfStatement','Statement',1,'p_statement','parser.py',45),
  ('Statement -> FunctionDeclaration','Statement',1,'p_statement','parser.py',46),
  ('Statement -> FunctionCall COMMAND_END','Statement',2,'p_statement','parser.py',47),
  ('Statement -> ScanStatement COMMAND_END','Statement',2,'p_statement','parser.py',48),
  ('Statement -> ForStatement','Statement',1,'p_statement','parser.py',49),
  ('Statement -> WhileStatement','Statement',1,'p_statement','parser.py',50),
  ('Statement -> ReturnStatement COMMAND_END','Statement',2,'p_statement','parser.py',51),
  ('StringDeclaration -> STRING QUOTATION_MARK STRING QUOTATION_MARK','StringDeclaration',4,'p_string_declaration','parser.py',58),
  ('StringDeclaration -> STRING APOSTROPHE STRING APOSTROPHE','StringDeclaration',4,'p_string_declaration','parser.py',59),
  ('Declaration -> Type Variable','Declaration',2,'p_declaration','parser.py',65),
  ('Declaration -> Type Variable ASSIGN Expression','Declaration',4,'p_declaration','parser.py',66),
  ('Declaration -> Type Variable COMMA VariableList','Declaration',4,'p_declaration','parser.py',67),
  ('Type -> INT','Type',1,'p_type','parser.py',79),
  ('Type -> DOUBLE','Type',1,'p_type','parser.py',80),
  ('Type -> STRING','Type',1,'p_type','parser.py',81),
  ('Type -> CHAR','Type',1,'p_type','parser.py',82),
  ('Type -> ARRAY','Type',1,'p_type','parser.py',83),
  ('Variable -> NAME','Variable',1,'p_variable','parser.py',89),
  ('VariableList -> Variable','VariableList',1,'p_variable_list','parser.py',94),
  ('VariableList -> Variable COMMA VariableList','VariableList',3,'p_variable_list','parser.py',95),
  ('Assignment -> Variable ASSIGN Expression','Assignment',3,'p_assignment','parser.py',104),
  ('Expression -> Term','Expression',1,'p_expression','parser.py',110),
  ('Expression -> Expression PLUS Term','Expression',3,'p_expression','parser.py',111),
  ('Expression -> Expression MINUS Term','Expression',3,'p_expression','parser.py',112),
  ('Term -> Factor','Term',1,'p_term','parser.py',121),
  ('Term -> Term TIMES Factor','Term',3,'p_term','parser.py',122),
  ('Term -> Term DIV Factor','Term',3,'p_term','parser.py',123),
  ('Term -> Term MOD Factor','Term',3,'p_term','parser.py',124),
  ('Factor -> INT_WORD','Factor',1,'p_factor','parser.py',136),
  ('Factor -> DOUBLE_WORD','Factor',1,'p_factor','parser.py',137),
  ('Factor -> STRING_WORD','Factor',1,'p_factor','parser.py',138),
  ('Factor -> CHAR_WORD','Factor',1,'p_factor','parser.py',139),
  ('Factor -> NAME_WORD','Factor',1,'p_factor','parser.py',140),
  ('Factor -> OPEN_BRACKET Expression CLOSED_BRACKET','Factor',3,'p_factor','parser.py',141),
  ('NAME_WORD -> NAME','NAME_WORD',1,'p_name_word','parser.py',147),
  ('NAME_WORD -> FunctionCall','NAME_WORD',1,'p_name_word','parser.py',148),
  ('PrintStatement -> PRINT Expression','PrintStatement',2,'p_print_statement','parser.py',154),
  ('IfStatement -> IF OPEN_BRACKET Expression CLOSED_BRACKET Block','IfStatement',5,'p_if_statement','parser.py',163),
  ('IfStatement -> IF OPEN_BRACKET Expression CLOSED_BRACKET Block ELSE Block','IfStatement',7,'p_if_statement','parser.py',164),
  ('IfStatement -> IF OPEN_BRACKET Expression CLOSED_BRACKET Block ElifStatements','IfStatement',6,'p_if_statement','parser.py',165),
  ('IfStatement -> IF OPEN_BRACKET Expression CLOSED_BRACKET Block ElifStatements ELSE Block','IfStatement',8,'p_if_statement','parser.py',166),
  ('ElifStatements -> ElifStatement','ElifStatements',1,'p_elif_statements','parser.py',183),
  ('ElifStatements -> ElifStatement ElifStatements','ElifStatements',2,'p_elif_statements','parser.py',184),
  ('ElifStatement -> ELIF OPEN_BRACKET Expression CLOSED_BRACKET Block','ElifStatement',5,'p_elif_statement','parser.py',193),
  ('FunctionDeclaration -> FUNCTION FunctionName OPEN_BRACKET FunctionParameters CLOSED_BRACKET Block','FunctionDeclaration',6,'p_function_declaration','parser.py',199),
  ('FunctionName -> NAME','FunctionName',1,'p_function_name','parser.py',205),
  ('FunctionParameters -> FunctionParameter','FunctionParameters',1,'p_function_parameters','parser.py',211),
  ('FunctionParameters -> FunctionParameter COMMA FunctionParameters','FunctionParameters',3,'p_function_parameters','parser.py',212),
  ('FunctionParameter -> Type Variable','FunctionParameter',2,'p_function_parameter','parser.py',222),
  ('FunctionCall -> FunctionName OPEN_BRACKET FunctionArguments CLOSED_BRACKET','FunctionCall',4,'p_function_call','parser.py',228),
  ('FunctionArguments -> FunctionArgument','FunctionArguments',1,'p_function_arguments','parser.py',234),
  ('FunctionArguments -> FunctionArgument COMMA FunctionArguments','FunctionArguments',3,'p_function_arguments','parser.py',235),
  ('FunctionArgument -> Expression','FunctionArgument',1,'p_function_argument','parser.py',244),
  ('ReturnStatement -> RETURN Expression','ReturnStatement',2,'p_return_statement','parser.py',250),
  ('WhileStatement -> WHILE OPEN_BRACKET Expression CLOSED_BRACKET Block','WhileStatement',5,'p_while_statement','parser.py',256),
  ('ForStatement -> FOR OPEN_BRACKET Assignment COMMAND_END Expression COMMAND_END Assignment CLOSED_BRACKET Block','ForStatement',9,'p_for_statement','parser.py',262),
  ('Expression -> Expression LOGAND Expression','Expression',3,'p_expression_logical','parser.py',268),
  ('Expression -> Expression LOGOR Expression','Expression',3,'p_expression_logical','parser.py',269),
  ('Expression -> LOGNOT Expression','Expression',2,'p_expression_logical','parser.py',270),
  ('Expression -> Expression EQUALS Expression','Expression',3,'p_expression_relational','parser.py',279),
  ('Expression -> Expression LESS_OR_EQUAL Expression','Expression',3,'p_expression_relational','parser.py',280),
  ('Expression -> Expression GREATER_OR_EQUAL Expression','Expression',3,'p_expression_relational','parser.py',281),
  ('Expression -> Expression LESS Expression','Expression',3,'p_expression_relational','parser.py',282),
  ('Expression -> Expression GREATER Expression','Expression',3,'p_expression_relational','parser.py',283),
  ('Expression -> Expression NOT_EQUAL Expression','Expression',3,'p_expression_relational','parser.py',284),
  ('Array -> ARRAY OPEN_SQUARE ArrayElements CLOSE_SQUARE','Array',4,'p_array','parser.py',290),
  ('ArrayElements -> ArrayElement','ArrayElements',1,'p_array_elements','parser.py',296),
  ('ArrayElements -> ArrayElement COMMA ArrayElements','ArrayElements',3,'p_array_elements','parser.py',297),
  ('ArrayElement -> Expression','ArrayElement',1,'p_array_element','parser.py',306),
  ('ScanStatement -> SCAN SCANDEST Variable','ScanStatement',3,'p_scan_statement','parser.py',312),
]
